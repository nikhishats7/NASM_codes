section .data
newline:db 10
msg1:db 'enter'
l1: equ $-msg1

section .bss
num: resw 1
n: resd 1
temp: resb 1
count: resb 1
array: resw 50

section .text
global _start:
_start:

call read_num
mov cx, word[num]
mov word[n], cx

mov ebx, array
mov eax, 0

call read_array



mov ebx, array
mov eax, 0
mov dx, 0
call print_array

mov eax,1
mov ebx,0
int 80h



read_num:
pusha
mov word[num], 0

loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read

end_read:
popa
ret

print_num:
mov byte[count], 0
pusha

extract:
cmp word[num], 0
je print_no
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 80h

popa 
ret

read_array:
pusha
read_loop:
call read_num
mov cx,word[num]
mov word[ebx+2*eax],cx
inc eax

cmp eax,dword[n]
je end1_read
jmp read_loop
end1_read:
popa
ret


print_array:
pusha
print_loop:
cmp eax,dword[n]
je end1_print
mov cx,word[ebx+2*eax]
mov word[num],cx

call print_num
inc eax
jmp print_loop
end1_print:
popa
ret
















section .data
newline:db 10
msg1:db 'enter'
l1: equ $-msg1

section .bss
num: resw 1
n: resd 1
temp: resb 1
count: resb 1
array: resw 50

section .text
global _start:
_start:

call read_num
mov cx, word[num]
mov word[n], cx

mov ebx, array
mov eax, 0

pusha
read_loop:
call read_num
mov cx,word[num]
mov word[ebx+2*eax],cx
inc eax

cmp eax,dword[n]
je end1_read
jmp read_loop
end1_read:
popa


mov eax, 0
mov ebx, array
call print_array

mov eax,1
mov ebx,0
int 80h



read_num:
pusha
mov word[num], 0

loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read

end_read:
popa
ret

print_num:
mov byte[count], 0
pusha

extract:
cmp word[num], 0
je print_no
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 80h

popa 
ret

; read_array:
; pusha
; read_loop:
; cmp eax,dword[n]
; je end1_read


; call read_num
; mov cx,word[num]
; mov word[ebx+2*eax],cx
; inc eax

; end1_read:
; popa
; ret


print_array:
pusha
print_loop:
cmp eax,dword[n]
je end1_print
mov cx,word[ebx+2*eax]
mov word[num],cx

call print_num
inc eax
jmp print_loop
end1_print:
popa
ret














section .data
newline:db 10
msg1:db 'even'
l1: equ $-msg1
msg2:db 'odd'
l2: equ $-msg2

section .bss
num: resw 1
n: resd 1
temp: resb 1
count: resb 1
array: resw 50
even: resw 1
odd: resw 1

section .text
global _start:
_start:

call read_num
mov cx, word[num]
mov word[n], cx

mov ebx, array
mov eax, 0

call read_array



mov ebx, array
mov eax, 0


mov word[odd], 0
mov word[even], 0


traverse:
mov cx,word[ebx+2*eax]
mov word[num],cx

mov ax, word[num]
mov bl, 2
mov ah, 0
div bl
cmp ah, 0
je ev_en
add word[odd], 1
jmp f1

ev_en:
add word[even], 1

f1:
inc eax
cmp eax,dword[n]
jb traverse



mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, l1
int 80h

mov cx, word[even]
mov word[num], cx
call print_num

mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, l2
int 80h

mov cx, word[odd]
mov word[num], cx
call print_num


mov eax,1
mov ebx,0
int 80h



read_num:
pusha
mov word[num], 0

loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read

end_read:
popa
ret

print_num:
mov byte[count], 0
pusha

extract:
cmp word[num], 0
je print_no
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 80h

popa 
ret

read_array:
pusha
read_loop:
call read_num
mov cx,word[num]
mov word[ebx+2*eax],cx
inc eax

cmp eax,dword[n]
je end1_read
jmp read_loop
end1_read:
popa
ret


; print_array:
; pusha
; print_loop:
; cmp eax,dword[n]
; je end1_print
; mov cx,word[ebx+2*eax]
; mov word[num],cx

; call print_num
; inc eax
; jmp print_loop
; end1_print:
; popa
; ret






























section .data
newline:db 10
msg1:db 'smallest'
l1: equ $-msg1
msg2:db 'largest'
l2: equ $-msg2

section .bss
num: resw 1
n: resd 1
temp: resb 1
count: resb 1
array: resd 50
small: resd 1
large: resd 1
counter: resd 1

section .text
global _start:
_start:

call read_num
mov cx, [num]
mov [n], cx

mov ebx, array
mov eax, 0

call read_array

mov ebx, array

mov ecx, [ebx]
mov [small], ecx
mov [large], ecx
mov eax, [n]
mov [counter], eax
add ebx, 2

traverse:

mov ecx, [ebx]
cmp ecx, [small]
jb set_small
f:
cmp ecx, [large]
ja set_large

set_small:
mov [small], ecx
jmp f
set_large:
mov [large], ecx

add ebx, 2
dec dword[counter]
cmp dword[counter], 0
jne traverse



mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, l1
int 80h

mov cx, word[small]
mov word[num], cx
call print_num

mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, l2
int 80h

mov cx, word[large]
mov word[num], cx
call print_num


mov eax,1
mov ebx,0
int 80h








read_num:
pusha
mov word[num], 0

loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read

end_read:
popa
ret

print_num:
mov byte[count], 0
pusha

extract:
cmp word[num], 0
je print_no
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 80h

popa 
ret

read_array:
pusha
read_loop:
call read_num
mov cx,word[num]
mov word[ebx+2*eax],cx
inc eax

cmp eax,dword[n]
je end1_read
jmp read_loop
end1_read:
popa
ret


; print_array:
; pusha
; print_loop:
; cmp eax,dword[n]
; je end1_print
; mov cx,word[ebx+2*eax]
; mov word[num],cx

; call print_num
; inc eax
; jmp print_loop
; end1_print:
; popa
; ret
