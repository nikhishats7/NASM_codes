;;symm or not

section .data
msg1: db 'enter row'
l1: equ $-msg1

msg2: db 'enter col'
l2: equ $-msg2

msg3: db 'enter elements row by row'
l3: equ $-msg3

msg4: db 'symmetric'
l4: equ $-msg4

msg5: db 'not symm'
l5: equ $-msg5

tab db 9
newline db 10

section .bss
matrix1: resw 200
temp: resb 10
count: resb 10
num: resw 1
row: resw 1
col: resw 1
i: resw 1
j: resw 1
k: resw 1
r: resw 1

section .text
global _start:
_start:

mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, l1
int 80h

call read_num
mov dx, word[num]
mov word[row], dx

mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, l2
int 80h

call read_num
mov dx, word[num]
mov word[col], dx

mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop2:
mov word[j], 0
j_loop2:
call read_num
mov dx, word[num]
mov word[ebx+2*eax], dx
inc eax
inc word[j]
mov dx, word[j]
cmp dx, word[col]
jb j_loop2

inc word[i]
mov dx, word[i]
cmp dx, word[row]
jb i_loop2


mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop:
mov word[j], 0
j_loop:
mov dx, word[ebx+2*eax]
mov word[num], dx
call print_num
pusha
mov eax, 4
mov ebx, 1
mov ecx, tab
mov edx, 1
int 80h
popa
inc eax
inc word[j]
mov dx, word[j]
cmp dx, word[col]
jb j_loop
pusha
mov eax, 4
mov ebx, 1
mov ecx, newline
mov edx, 1
int 80h
popa

inc word[i]
mov dx, word[i]
cmp dx, word[row]
jb i_loop

mov ax, word[col]
mov bx, 2
mul bx
mov word[k], ax


; transpose
mov eax, 0
mov ecx, 0
mov ebx, matrix1
mov edx, matrix1
mov word[i], 0
mov word[j], 0
i_loop3:
mov word[j], 0
mov ecx, 0
j_loop3:
pusha
add eax, ecx
mov dx, word[ebx+eax]
mov word[num], dx
popa
pusha
mov ax, word[num]
cmp ax, word[edx]
jne not_sym
popa

add edx, 2
add ecx, dword[k]

inc word[j]
pusha
mov dx, word[j]
cmp dx, word[row]
popa
jb j_loop3


add eax, 2
inc word[i]
pusha
mov dx, word[i]
cmp dx, word[col]
popa
jb i_loop3


mov eax, 4
mov ebx, 1
mov ecx, msg4
mov edx, l4
int 80h
jmp end

not_sym:
mov eax, 4
mov ebx, 1
mov ecx, msg5
mov edx, l5
int 80h

end:
mov eax, 1
mov ebx, 0
int 80h

read_num:
pusha
mov word[num], 0

read_loop:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp read_loop

end_read:
popa
ret

print_num:
pusha
mov byte[count], 0

extract:
cmp word[num], 0
je print_no

inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
popa
ret











section .bss
num: resw 1 ;For storing a number, to be read of printed....
nod: resb 1 ;For storing the number of digits....
temp: resb 2
matrix1: resw 200
m: resw 1
n: resw 1
i: resw 1
j: resw 1
count: resw 1

section .data
msg1: db "Enter the number of rows in the matrix : "
msg_size1: equ $-msg1
msg2: db "Enter the elements one by one(row by row) : "
msg_size2: equ $-msg2
msg3: db "Enter the number of columns in the matrix : "
msg_size3: equ $-msg3
tab: db 9 ;ASCII for vertical tab
new_line: db 10 ;ASCII for new line
section .text
global _start
_start:
mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, msg_size1
int 80h
; mov ecx, 0
;calling sub function read num to read a number
call read_num
mov cx, word[num]
mov word[m], cx
mov eax, 4
mov ebx, 1
mov ecx, msg3
mov edx, msg_size3
int 80h
; mov ecx, 0
call read_num
mov cx, word[num]
mov word[n], cx
mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, msg_size2
int 80h
;Reading each element of the matrix........
mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop:
mov word[j], 0
j_loop:
call read_num
mov dx , word[num]
;eax will contain the array index and each element is 2 bytes(1 word) long
mov word[ebx + 2 * eax], dx
inc eax ;Incrementing array index by one....
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop


;Printing each element of the matrix
mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop2:
mov word[j], 0
j_loop2:
;eax will contain the array index and each element is 2 bytes(1 word) long
mov dx, word[ebx + 2 * eax] ;
mov word[num] , dx
call print_num
;Printing a space after each element.....
pusha
mov eax, 4
mov ebx, 1
mov ecx, tab
mov edx, 1
int 80h
popa
inc eax
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop2
pusha
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h
popa
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop2
;Exit System Call.....
exit:
mov eax, 1
mov ebx, 0
int 80h



read_num:
pusha
mov word[num], 0

loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read

end_read:
popa
ret

print_num:
mov byte[count], 0
pusha

extract:
cmp word[num], 0
je print_no
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h

popa 
ret


































section .bss
num: resw 1 ;For storing a number, to be read of printed....
nod: resb 1 ;For storing the number of digits....
temp: resb 2
matrix1: resw 200
matrix2: resw 200
sum: resw 200
m: resw 1
n: resw 1
i: resw 1
j: resw 1
count: resw 1

section .data
msg1: db "Enter the number of rows in the matrix : "
msg_size1: equ $-msg1
msg2: db "Enter the elements one by one(row by row) : "
msg_size2: equ $-msg2
msg3: db "Enter the number of columns in the matrix : "
msg_size3: equ $-msg3
tab: db 9 ;ASCII for vertical tab
new_line: db 10 ;ASCII for new line
section .text
global _start
_start:
mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, msg_size1
int 80h

call read_num
mov cx, word[num]      ;row
mov word[m], cx



mov eax, 4
mov ebx, 1
mov ecx, msg3
mov edx, msg_size3
int 80h
call read_num
mov cx, word[num]              ;column
mov word[n], cx


mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, msg_size2
int 80h
;Reading each element of the matrix........
mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop:
mov word[j], 0
j_loop:
call read_num
mov dx , word[num]
;eax will contain the array index and each element is 2 bytes(1 word) long
mov word[ebx + 2 * eax], dx
inc eax ;Incrementing array index by one....
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop


mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, msg_size2
int 80h
;Reading each element of the matrix........
mov eax, 0
mov ebx, matrix2
mov word[i], 0
mov word[j], 0
i_loop1:
mov word[j], 0
j_loop1:
call read_num
mov dx , word[num]
;eax will contain the array index and each element is 2 bytes(1 word) long
mov word[ebx + 2 * eax], dx
inc eax ;Incrementing array index by one....
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop1
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop1



;adding
mov eax, 0
mov ebx, matrix1
mov ecx, matrix2
mov edx, sum
mov word[i], 0
mov word[j], 0
i_loops2:
mov word[j], 0
j_loops2:
;eax will contain the array index and each element is 2 bytes(1 word) long
pusha
mov dx, word[ebx + 2 * eax] ;
add dx, word[ecx+2*eax]
mov word[edx+2*eax], dx
inc eax
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loops2

inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loops2
popa



; printing sum
mov eax, 0
mov ebx, sum
mov word[i], 0
mov word[j], 0
i_loop2:
mov word[j], 0
j_loop2:
;eax will contain the array index and each element is 2 bytes(1 word) long
mov dx, word[ebx + 2 * eax] ;
mov word[num] , dx
call print_num
;Printing a space after each element.....
pusha
mov eax, 4
mov ebx, 1
mov ecx, tab
mov edx, 1
int 80h
popa
inc eax
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop2
pusha
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h
popa
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop2

;Exit System Call.....
exit:
mov eax, 1
mov ebx, 0
int 80h



read_num:
pusha
mov word[num], 0

loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read

end_read:
popa
ret

print_num:
mov byte[count], 0
pusha

extract:
cmp word[num], 0
je print_no
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h

popa 
ret




























section .bss
num: resw 1 ;For storing a number, to be read of printed....
nod: resb 1 ;For storing the number of digits....
temp: resb 2
matrix1: resw 200
matrix2: resw 200
sum: resw 200
m: resw 1
n: resw 1
i: resw 1
j: resw 1
count: resw 1

section .data
msg1: db "Enter the number of rows in the matrix : "
msg_size1: equ $-msg1
msg2: db "Enter the elements one by one(row by row) : "
msg_size2: equ $-msg2
msg3: db "Enter the number of columns in the matrix : "
msg_size3: equ $-msg3
tab: db 9 ;ASCII for vertical tab
new_line: db 10 ;ASCII for new line
section .text
global _start
_start:
mov eax, 4
mov ebx, 1
mov ecx, msg1
mov edx, msg_size1
int 80h

call read_num
mov cx, word[num]      ;row
mov word[m], cx



mov eax, 4
mov ebx, 1
mov ecx, msg3
mov edx, msg_size3
int 80h
call read_num
mov cx, word[num]              ;column
mov word[n], cx


mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, msg_size2
int 80h
;Reading each element of the matrix........
mov eax, 0
mov ebx, matrix1
mov word[i], 0
mov word[j], 0
i_loop:
mov word[j], 0
j_loop:
call read_num
mov dx , word[num]
;eax will contain the array index and each element is 2 bytes(1 word) long
mov word[ebx + 2 * eax], dx
inc eax ;Incrementing array index by one....
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop


mov eax, 4
mov ebx, 1
mov ecx, msg2
mov edx, msg_size2
int 80h
;Reading each element of the matrix........
mov eax, 0
mov ebx, matrix2
mov word[i], 0
mov word[j], 0
i_loop1:
mov word[j], 0
j_loop1:
call read_num
mov dx , word[num]
;eax will contain the array index and each element is 2 bytes(1 word) long
mov word[ebx + 2 * eax], dx
inc eax ;Incrementing array index by one....
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop1
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop1



;adding
; mov eax, 0
mov ebx, matrix1
mov eax, matrix2
; mov ecx, matrix2
; mov edx, sum
mov word[i], 0
mov word[j], 0
i_loops2:
mov word[j], 0
j_loops2:
;eax will contain the array index and each element is 2 bytes(1 word) long

pusha
mov dx, word[ebx]
add dx, word[eax]
; mov word[edx+2*eax], dx
mov word[num], dx
call print_num
add ebx, 2
add eax, 2
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loops2

inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loops2
popa



; printing sum
mov eax, 0
mov ebx, sum
mov word[i], 0
mov word[j], 0
i_loop2:
mov word[j], 0
j_loop2:
;eax will contain the array index and each element is 2 bytes(1 word) long
mov dx, word[ebx + 2 * eax] ;
mov word[num] , dx
call print_num
;Printing a space after each element.....
pusha
mov eax, 4
mov ebx, 1
mov ecx, tab
mov edx, 1
int 80h
popa
inc eax
inc word[j]
mov cx, word[j]
cmp cx, word[n]
jb j_loop2
pusha
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h
popa
inc word[i]
mov cx, word[i]
cmp cx, word[m]
jb i_loop2

;Exit System Call.....
exit:
mov eax, 1
mov ebx, 0
int 80h



read_num:
pusha
mov word[num], 0

loop_read:
mov eax, 3
mov ebx, 0
mov ecx, temp
mov edx, 1
int 80h

cmp byte[temp], 10
je end_read
mov ax, word[num]
mov bx, 10
mul bx

mov bl, byte[temp]
sub bl, 30h
mov bh, 0
add ax, bx
mov word[num], ax
jmp loop_read

end_read:
popa
ret

print_num:
mov byte[count], 0
pusha

extract:
cmp word[num], 0
je print_no
inc byte[count]
mov dx, 0
mov ax, word[num]
mov bx, 10
div bx
push dx
mov word[num], ax
jmp extract

print_no:
cmp byte[count], 0
je end_print
dec byte[count]
pop dx
mov byte[temp], dl
add byte[temp], 30h
mov eax, 4
mov ebx, 1
mov ecx, temp
mov edx, 1
int 80h
jmp print_no

end_print:
mov eax, 4
mov ebx, 1
mov ecx, new_line
mov edx, 1
int 80h

popa 
ret
